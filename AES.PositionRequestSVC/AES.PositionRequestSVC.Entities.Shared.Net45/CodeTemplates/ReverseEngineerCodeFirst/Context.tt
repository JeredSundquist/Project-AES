<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>
using System.Data.Entity;
using <#= code.EscapeNamespace(efHost.MappingNamespace) #>;

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{
    public partial class <#= efHost.EntityContainer.Name #> : DbContext
    {
        static <#= efHost.EntityContainer.Name #>()
        {
            Database.SetInitializer(new NullDatabaseInitializer<<#= efHost.EntityContainer.Name #>>());
        }

        public <#= efHost.EntityContainer.Name #>()
            : base("Name=<#= efHost.EntityContainer.Name #>")
        {
            this.Configuration.ProxyCreationEnabled = false;
        }

<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
        public virtual DbSet<<#= set.ElementType.Name #>> <#= set.Name #> { get; set; }
<#
    }
#>

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
            modelBuilder.Configurations.Add(new <#= set.ElementType.Name #>Map());
<#
    }
#>
            ModelCreating(modelBuilder);
        }

        partial void ModelCreating(DbModelBuilder modelBuilder);
    }
}
