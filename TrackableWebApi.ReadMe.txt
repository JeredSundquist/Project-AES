Trackable Web API ReadMe

This solution containts everything you need to create an ASP.NET Web API
service that uses trackable entities. At this time only C# is supported
using Visual Studio 2012 or 2013.

NOTE: You can use the EF 6.x Tools for Visual Studio to reverse
engineer both client and service trackable entities:
http://www.microsoft.com/en-us/download/details.aspx?id=40762.
Add an "ADO.NET Entity Data Model" and select "Code First from Database."
However, the EF 6.x Tools are not compatible with the Client.Entities
project, which is a Portable Class Library. Either add client entities
to a .NET 4.5 Class Library and copy or link them to Client.Entities,
or use the Entity Framework Power Tools to generate client entities:
http://visualstudiogallery.msdn.microsoft.com/72a60b14-1581-4b9b-89f2-846072eff19d.

You can also generate client and service trackable entities using a Model-
First approach, by adding an ADO.NET Entity Data Model and selecting
"EF Designer from Database." Then right-click the model design surface,
select "Add Code Generation Item," and choose either a Client or Service
Trackable Entities EF 6.x Model First Generator, entering the same name
as the existing model and responding "Yes" to the prompts to replace
existing .tt files.

These steps use a scaled down version of the Northwind database, which you 
can get here: http://bit.ly/northwindslim.

Before starting the client Console app, build the solution, then right-click 
on the Web Api project and select View in Browser. This will start the service 
using the IIS Express web server.

1. Reverse engineer a database for the Service.Entities project
   - Right-click on the project, select Entity Framework,
	 Reverse Engineer Code First.
	 > Enter the connection information: server, database name
	 > For these steps we are using the NorthwindSlim database
   - Build the solution

2. Copy the connection string from App.config in Service.Entities
   - Paste it into the connectionStrings section of the web.config
	 file in the Service.WebApi project

3. Add a new Web API controller using Entity Framework
   - Right-click the Controllers folder in the Web Api project
	 and select Add, Controller
   - Enter Orders for the contoller name
	 > For Template: select API controller with read/write actions,
	   using Entity Framework
	 > For Model class: select the Order class
	 > For Data context class: select NorthwindSlimContext
   - The code-generated API controller class is only slightly different
	 than the standard version.
	 > The Put action calls _dbContext.ApplyChanges, which applies entity state
	   from trackable entities in the Order's object graph. The updated 
	   entity is returned so as to include a possible concurrency field.
	 > The delete method has also been altered to accept an entity
	   parameter and use it to create a dummy entity for deletion. There
	   can be a TODO item for setting the concurrency field if there is one.
   - Modify the GetOrders method to include related OrderDetails and Products:
		IEnumerable<Order> orders = await _dbContext.Orders.Include(o => o.Customer)
			.Include("OrderDetails.Product")
			.Where(o => o.CustomerId == customerId)
			.ToListAsync();
	 > Do the same for the GetOrder method:
		Order order = await _dbContext.Orders.Include(o => o.Customer)
			.Include("OrderDetails.Product")
			.SingleOrDefaultAsync(o => o.OrderId == id);
   - Add a GetOrders method that accepts a customerId:
		// GET api/Orders?customerId=ABCD
		public async Task<IEnumerable<Order>> GetOrders(string customerId)
		{
			IEnumerable<Order> orders = await _dbContext.Orders.Include(o => o.Customer)
				.Include("OrderDetails.Product")
				.Where(o => o.CustomerId == customerId)
				.ToListAsync();
			return orders;
		}
   - Add code to DeleteOrder to include order details:
		// Include order details
		Order order = _dbContext.Orders
		.Include(o => o.OrderDetails)
		.SingleOrDefaultAsync(o => o.OrderId == id);

4. Run the Web Api project to test the controller
	- Click the API link on the home page
	- Select an operation, such as GetOrders or GetOrder
	- Click the Test API button, fill out the form and click Send
	  > You should see Json for the response body

5. Reverse engineer trackable entities for Client.Entities project
   - Right-click, Entity Framework, Reverse Engineer Code First
	 > Enter the connection information: server, database name
	 > For this sample we are using the NorthwindSlim database
   - Delete the Mapping folder
   - Delete the data context class: NorthwindSlimContext
   - Build the solution

6. Lastly, flesh out code in the ConsoleClient project to invoke
   controller actions for the Web API service.
   - Uncomment code in Program.Main
   - Replace the port number for HttpClient with that shown in the
	 Web API home page.
